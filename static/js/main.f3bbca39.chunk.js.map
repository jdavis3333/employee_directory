{"version":3,"sources":["components/jumbotron/index.js","components/employee-table/index.js","App.js","serviceWorker.js","index.js"],"names":["MyJumbotron","Jumbotron","fluid","Container","EmployeeTable","props","data","map","row","key","image","name","phone_number","email_address","birthday","App","sortName","employee","state","i","length","j","temp","setState","console","log","searchName","event","value","target","search","newList","n","toLowerCase","indexOf","push","direction","className","Form","Control","this","onChange","type","placeholder","onClick","sortBy","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8UAiBeA,MAbf,WACI,OACI,kBAACC,EAAA,EAAD,CAAWC,OAAK,GACZ,kBAACC,EAAA,EAAD,KACI,kDACA,oHCPD,SAASC,EAAcC,GAClC,OAEQ,+BAEQA,EAAMC,KAAKC,KAAI,SAACC,EAAIC,GAAL,OACX,wBAAIA,IAAKA,GACL,4BAAKD,EAAIE,OACT,4BAAKF,EAAIG,MACT,4BAAKH,EAAII,cACT,4BAAKJ,EAAIK,eACT,4BAAKL,EAAIM,e,mBC4EtBC,E,kDAhFb,WAAYV,GAAQ,IAAD,8BACjB,cAAMA,IASRW,SAAW,WAGT,IAFA,IAAIC,EAAW,EAAKC,MAAMZ,KAEjBa,EAAI,EAAGA,EAAIF,EAASG,OAAQD,IAAK,CACxC,IAAK,IAAIE,EAAI,EAAGA,EAAIJ,EAASG,OAAQC,IACnC,GAAIJ,EAASE,GAAGR,KAAOM,EAASI,GAAGV,KAAM,CACvC,IAAIW,EAAOL,EAASE,GACpBF,EAASE,GAAKF,EAASI,GACvBJ,EAASI,GAAKC,EAIlB,EAAKC,SAAS,CAAEjB,KAAMA,IAExBkB,QAAQC,IAAIR,IAxBK,EA4BnBS,WAAa,SAACC,GACZ,IAAIC,EAAQD,EAAME,OAAOD,MAGzB,GAFAJ,QAAQC,IAAIG,GACZ,EAAKL,SAAS,CAAEO,OAAQF,IACV,KAAVA,EACF,EAAKL,SAAS,CAAEjB,KAAMA,QACjB,CAGL,IAFA,IAAIyB,EAAU,GACVd,EAAW,EAAKC,MAAMZ,KACjBa,EAAI,EAAGA,EAAIF,EAASG,OAAQD,IAAK,CACxC,IAAIa,EAAKf,EAASE,GAAGR,KAAKsB,cAAeC,QAAQN,EAAMK,eACvDT,QAAQC,IAAIR,EAASE,GAAGR,KAAMiB,IACnB,IAAPI,GACFD,EAAQI,KAAKlB,EAASE,IAG1BK,QAAQC,IAAIM,GACZ,EAAKR,SAAS,CAAEjB,KAAMyB,MA3CxB,EAAKb,MAAQ,CACXZ,KAAMA,EACNwB,OAAQ,GACRM,UAAW,OALI,E,qDAkDjB,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAClC,EAAA,EAAD,CAAWD,OAAK,GACd,kBAACoC,EAAA,EAAKC,QAAN,CAAcX,MAAOY,KAAKtB,MAAMY,OAAQW,SAAUD,KAAKd,WAAYgB,KAAK,OAAOC,YAAY,YAE7F,+BACE,+BACE,4BACE,qCACA,4BACE,uBACEC,QAASJ,KAAKxB,UADhB,SAIF,4CACA,qCACA,qCAIJ,kBAAEZ,EAAF,CACEE,KAAMkC,KAAKtB,MAAMZ,KACjBuC,OAAQL,KAAKK,e,GA1EPC,IAAMC,WCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzC,QAAQyC,MAAMA,EAAMC,a","file":"static/js/main.f3bbca39.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\nimport { Jumbotron, Container } from 'react-bootstrap';\r\n\r\nfunction MyJumbotron() {\r\n    return (\r\n        <Jumbotron fluid>\r\n            <Container>\r\n                <h1>Employee Directory</h1>\r\n                <p>\r\n                    Click on carrots to filter by heading or use the search box to narrow your results\r\n                </p>\r\n            </Container>\r\n        </Jumbotron>\r\n    );\r\n}\r\n\r\nexport default MyJumbotron;","import React from 'react'\r\n\r\nexport default function EmployeeTable(props) {\r\n    return (\r\n       \r\n            <tbody>\r\n                {\r\n                    props.data.map((row,key) => (\r\n                        <tr key={key}>\r\n                            <td>{row.image}</td>\r\n                            <td>{row.name}</td>\r\n                            <td>{row.phone_number}</td>\r\n                            <td>{row.email_address}</td>\r\n                            <td>{row.birthday}</td>\r\n                        </tr>\r\n                    ))\r\n                }\r\n\r\n            </tbody>\r\n\r\n\r\n\r\n       \r\n    )\r\n}","import React from 'react';\nimport './App.css';\nimport MyJumbotron from \"./components/jumbotron\";\n// import MySearch from \"./components/search\";\nimport EmployeeTable from \"./components/employee-table\";\nimport data from \"../src/giants.json\";\nimport { Form, Container } from 'react-bootstrap';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      data: data,\n      search: \"\",\n      direction: 'asc'\n    }\n    // this.sortBy = this.sortBy.bind(this)\n  }\n\n  sortName = () => {\n    var employee = this.state.data\n    //check state, then do for loop. in else part, swap to desc. also change state of direction \n    for (var i = 0; i < employee.length; i++) {\n      for (var j = 0; j < employee.length; j++) {\n        if (employee[i].name > employee[j].name) {\n          var temp = employee[i]\n          employee[i] = employee[j]\n          employee[j] = temp\n\n        }\n      }\n      this.setState({ data: data })\n    }\n    console.log(employee)\n\n  }\n\n  searchName = (event) => {\n    var value = event.target.value\n    console.log(value)\n    this.setState({ search: value })\n    if (value === \"\") {\n      this.setState({ data: data })\n    } else {\n      var newList = []\n      var employee = this.state.data\n      for (let i = 0; i < employee.length; i++) {\n        var n = (employee[i].name.toLowerCase()).indexOf(value.toLowerCase());\n        console.log(employee[i].name, value)\n        if (n !== -1) {\n          newList.push(employee[i])\n        }\n      }\n      console.log(newList)\n      this.setState({ data: newList })\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\" >\n        <MyJumbotron />\n        <Container fluid>\n          <Form.Control value={this.state.search} onChange={this.searchName} type=\"text\" placeholder=\"search\" />\n        </Container>\n        <table>\n          <thead>\n            <tr>\n              <th>Image</th>\n              <th>\n                <p\n                  onClick={this.sortName}\n                >Name</p>\n              </th>\n              <th>Phone Number</th>\n              <th>Email</th>\n              <th>DOB</th>\n            </tr>\n          </thead>\n\n          < EmployeeTable\n            data={this.state.data}\n            sortBy={this.sortBy} />\n        </table>\n      </div>\n    );\n  }\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}